import ProviderEngine from 'web3-provider-engine';
import { ISDKConfig, INetwork, IOptions, IWidget, BTCSignTxSDKInput } from './interfaces';
export default class Portis {
    config: ISDKConfig;
    widgetPromise: Promise<IWidget>;
    widgetInstance: IWidget;
    engine: ProviderEngine;
    provider: any;
    private _selectedAddress;
    private _network;
    private _widgetUrl;
    private _onLoginCallback;
    private _onLogoutCallback;
    private _onActiveWalletChangedCallback;
    private _onErrorCallback;
    constructor(dappId: string, network: string | INetwork, options?: IOptions);
    changeNetwork(network: string | INetwork, gasRelay?: boolean): void;
    setDefaultEmail(email: string): void;
    getWidget(): Promise<IWidget>;
    onLogin(callback: (walletAddress: string, email?: string, reputation?: string) => void): void;
    onLogout(callback: () => void): void;
    onActiveWalletChanged(callback: (walletAddress: string) => void): void;
    onError(callback: (error: Error) => void): void;
    showPortis(): Promise<void>;
    logout(): Promise<{
        error: string;
        result: boolean;
    }>;
    getExtendedPublicKey(path?: string, coin?: string): Promise<{
        error: string;
        result: string;
    }>;
    importWallet(mnemonicOrPrivateKey: string): Promise<void>;
    isLoggedIn(): Promise<{
        error: string;
        result: boolean;
    }>;
    signBitcoinTransaction(params: BTCSignTxSDKInput): Promise<{
        error: string;
        result: {
            serializedTx: string;
            txid: string;
        };
    }>;
    showBitcoinWallet(path?: string): Promise<void>;
    private _checkIfWidgetAlreadyInitialized;
    private _validateParams;
    private _initWidget;
    private _initProvider;
    private _setHeight;
    private _getWindowSize;
    private _onLogin;
    private _onLogout;
    private _onActiveWalletChanged;
    private _onError;
    private clearSubprovider;
}
